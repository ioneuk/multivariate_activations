import triton
import triton.language as tl

@triton.jit
def gaussian_activation_kernel(x, means, weights, var_covar, output, BATCH, SEQ_LEN, HIDDEN_HALF, **meta):
    # Compute indices
    batch_idx = tl.program_id(0)
    seq_idx = tl.program_id(1)
    hidden_half_idx = tl.program_id(2)

    # Check bounds
    if (batch_idx >= BATCH) or (seq_idx >= SEQ_LEN) or (hidden_half_idx >= HIDDEN_HALF):
        return

    # Gaussian function computation
    def gaussian(x, mean, var_covar):
        diff = x - mean
        exponent = -tl.dot(tl.dot(diff, tl.inverse(var_covar)), diff) / 2
        normalization = tl.sqrt(tl.det(2 * 3.141592653589793 * var_covar))
        return tl.exp(exponent) / normalization

    # Point where to evaluate
    x_point = x[batch_idx, seq_idx, hidden_half_idx]

    # Compute activation
    a = 0
    for i in range(4):
        a += weights[i] * gaussian(x_point, means[i], var_covar[i])

    # Write to output
    output[batch_idx, seq_idx, hidden_half_idx] = a
